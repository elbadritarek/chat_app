import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';

import '../utils/settings.dart';

class AgoraService {
  // final String appId = "YOUR_AGORA_APP_ID";

  late RtcEngine _engine;

  Future<void> initializeAgora() async {
    // Request microphone permission
    await [Permission.microphone].request();

    // Create the Agora engine
    // Create RtcEngine instance
    _engine = await createAgoraRtcEngine();

// Initialize RtcEngine and set the channel profile to communication
    await _engine.initialize(const RtcEngineContext(
      appId: appId,
      channelProfile: ChannelProfileType.channelProfileCommunication,
    ));

    await _engine.joinChannel(
      // Join a channel using a temporary token and channel name
      token: token,
      channelId: channel,
      options: const ChannelMediaOptions(
          // Automatically subscribe to all audio streams
          autoSubscribeAudio: true,
          // Publish microphone audio
          publishMicrophoneTrack: true,
          // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
          clientRoleType: ClientRoleType.clientRoleBroadcaster),
      uid:
          0, // When you set uid to 0, a user name is randomly generated by the engine
    );
    _engine.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint("local user ${connection.localUid} joined");
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          debugPrint("remote user $remoteUid joined");
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          debugPrint("remote user $remoteUid left channel");
        },
      ),
    );
  }


  Future<void> dispose() async {
    await _engine.leaveChannel(); // Leave the channel
    await _engine.release(); // Release resources
  }
}
